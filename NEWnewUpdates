///////////////////////////////main/////////////////////////////////////////
package language;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Stack;

/**
 * Created by mrowland on 11/15/2017 for FPSLang.
 */

public class main {
    private static Stack<Integer> operatingStack = new Stack<>();
    private static LanguageMap languageMap;

    public static void main (String[] args) {
        languageMap = new LanguageMap();

        String filepath = "sourceFile.txt";

        Scanner sourceFile = null;
        try {
            sourceFile = new Scanner(new File(filepath));
        } catch (FileNotFoundException exception) {
            System.out.println("File not found. " + exception);
        }

        assert (sourceFile != null);

        LanguageParser parser = new LanguageParser(sourceFile);

        while (parser.hasNextToken()) {
            String currentToken = parser.getNextToken();
            if (languageMap.getValueForMapKey(currentToken).equals("comment")) {
                while (parser.hasNextToken() && !parser.getNextToken().equals("endComment"))
                    continue;
                continue;
            }
            else if (languageMap.getValueForMapKey(currentToken).equals("newVar")) {
                String varName = parser.getNextToken();
                if(languageMap.languageMapContainsKey(varName)){
                	throw new IllegalArgumentException("This variable "+varName+" cannot be a keyword ");
                }
                else{
                String varData = parser.getNextToken();
                addVariable(varName, varData);
                }
            }
            else if (languageMap.getValueForMapKey(currentToken).equals("updateVar")) {
                //variable must be able to do math with itself, and then be updated and stored
                //use local public method "updateVariable(String varName, String value)" to update
            	String varName = parser.getNextToken();
            	 if(languageMap.getValueForMapKey(varName)==""){
                 	throw new IllegalArgumentException("This variable "+varName+" is not currently a variable ");
                 }
                 else{
                 String varData = parser.getNextToken();
                 languageMap.updateVariableInVariableMap(varName, varData);
                 }
           
            }
            else if (languageMap.getValueForMapKey(currentToken).equals("printPlayer")) {
            	String varName = parser.getNextToken();
            	System.out.println(languageMap.getValueForMapKey(varName));
            	
            }
            else //might need something else here
                evaluateNextOperation(currentToken);

        }

    }

    public static Integer testIfStringIsInteger (String str) {
        Integer intTest = null;
        try {
            intTest = new Integer(str);
        } catch (NumberFormatException exception) {}
        return intTest;
    }

    /*
        evaluateNextOperation receives current keyword from main, and will push to the stack if the current key is an integer, else
     */
    public static void evaluateNextOperation(String currentToken) {
    	
    	if(languageMap.variableMapContainsKey(currentToken)){
    		currentToken = languageMap.getValueForMapKey(currentToken);
    	}

      
        
        Integer integer = testIfStringIsInteger(currentToken);
        
        
        if (integer != null) {
            operatingStack.push(integer);
        } else {

            switch (languageMap.getValueForMapKey(currentToken)) {

                case "add":
                    if (operatingStack.size() < 2)
                        System.out.println("Must be enough Integers on the stack");
                    else {
                        int firstPop = operatingStack.pop();
                        int secondPop = operatingStack.pop();
                        operatingStack.add(secondPop + firstPop);
                    }
                    break;

                case "subtract":
                    if (operatingStack.size() < 2)
                        System.out.println("Must be enough Integers on the stack");
                    else {
                        int firstPop = operatingStack.pop();
                        int secondPop = operatingStack.pop();
                        operatingStack.add(secondPop - firstPop);
                    }
                    break;

                case "multiply":
                    if (operatingStack.size() < 2)
                        System.out.println("Must be enough Integers on the stack");
                    else {
                        int firstPop = operatingStack.pop();
                        int secondPop = operatingStack.pop();
                        operatingStack.add(secondPop * firstPop);
                    }
                    break;

                case "divide":
                    if (operatingStack.size() < 2)
                        System.out.println("Must be enough Integers on the stack");
                    else {
                        int firstPop = operatingStack.pop();
                        int secondPop = operatingStack.pop();
                        operatingStack.add(secondPop / firstPop);
                    }
                    break;

                case "power":
                    if (operatingStack.size() < 2)
                        System.out.println("Must be enough Integers on the stack");
                    else {
                        int firstPop = operatingStack.pop();
                        int secondPop = operatingStack.pop();
                        operatingStack.add((int) Math.pow(secondPop, firstPop));
                    }
                    break;
                case "print":
                    if (operatingStack.isEmpty())
                        System.out.println("There is nothing on the stack");
                    else {
                        System.out.println(operatingStack.pop());
                    }
                    break;
                
                default:
                    throw new IllegalArgumentException("Syntax error. Keyword or Variable \"" + currentToken + "\" is undefined");
            }
        }
    }

    public static void addVariable(String varName, String value) {
        languageMap.addToVariableMap(varName, value);
    }

    public static void updateVariable(String varName, String value){
        languageMap.updateVariableInVariableMap(varName, value);
    }
}
////////////////////////////LanguageParser///////////////////////////////////////////////////
package language;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Created by mrowland on 11/15/2017 for FPSLang.
 */

public class LanguageParser {
    private List<String> tokenList;
    // private List<String[]> lineList;
    private int currentTokenIndex = -1;

    public LanguageParser(Scanner file) {
        tokenList = new ArrayList<>();
        /*while(file.hasNextToken()) {
            lineList.add(file.nextLine().split("[\n\t ]"));
        }
         */

        while(file.hasNext())
            tokenList.add(file.next());
    }

    public int numberOfLines() {
        return tokenList.size();
    }

    /*
    public String[] getNextLine() {
        currentTokenIndex++;
        return lineList.get(currentTokenIndex);
    }
    */

    public String getNextToken() {
    	currentTokenIndex++;
        return tokenList.get(currentTokenIndex);
    }

    public boolean hasNextToken() {
        return (currentTokenIndex+1 <= tokenList.size()-1);  //changed from currentTokenIndex++ to +1
    }

    public int currentTokenIndex() {
        return currentTokenIndex;
    }

}
///////////languageMap/////////////////////////////////////////////////
package language;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by mrowland on 11/19/2017 for FPSLang.
 */

public class LanguageMap {
    private Map<String, String> langMap;
    private Map<String, String> varMap;

    public LanguageMap() {
        langMap = new HashMap<>();
        varMap = new HashMap<>();

        langMap.put("forward", "add");
        langMap.put("back" , "subtract");
        langMap.put("jump", "multiply");
        langMap.put("crouch", "divide");
        langMap.put("zerg", "power");
        langMap.put("spawn", "print");
        langMap.put("spawnPlayer", "printPlayer");
        langMap.put("$", "comment");
        langMap.put("/$", "endComment");
        langMap.put("newPlayer", "newVar");
        langMap.put("changePlayer" , "updateVar");
        langMap.put("levelUp", "power");
        langMap.put("redTeam", "true");//maybe implement if time 
        langMap.put("blueTeam", "false");///
        langMap.put("doubleKill", "if");//
    }

    public String getValueForMapKey(String key) {
    	
    	String keyValue = ""; 
        if (languageMapContainsKey(key))
        	keyValue = langMap.get(key);
        if (variableMapContainsKey(key))
            keyValue= varMap.get(key);
        
        return keyValue;
      //  else
       // new IllegalArgumentException("");
    }


    public void addToVariableMap(String key, String value) {
        varMap.put(key, value);
    }

    public void updateVariableInVariableMap(String key, String value) {
        varMap.replace(key, value);
    }

    public boolean languageMapContainsKey(String key) {
        return langMap.containsKey(key);
    }

    public boolean variableMapContainsKey(String key) {
        return varMap.containsKey(key);
    }

}
